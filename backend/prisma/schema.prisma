// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  questions Question[]
  answers   Answer[]
  comments  Comment[]

  @@map("users")
}

model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  tags        String[] // Array of tag strings
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers  Answer[]
  comments Comment[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  authorId   String   @db.ObjectId
  questionId String   @db.ObjectId
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("answers")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  authorId   String   @db.ObjectId
  questionId String?  @db.ObjectId
  answerId   String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  author   User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer? @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum Role {
  USER
  ADMIN
  MODERATOR
} 